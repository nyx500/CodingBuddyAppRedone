@model EditUserViewModel

@*Stylesheet link:*@
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

@{
ViewBag.Title = "My Profile";
}

<h2 class="profile-header"><strong>Edit Profile</strong></h2>

<div class="profile-wrapper">
    @* radio buttons will be hidden, are there just to enable
        selection of correct tabs
    *@
    <input class="radio" id="radio-one" name="group" type="radio" checked>
    <input class="radio" id="radio-two" name="group" type="radio">
    <input class="radio" id="radio-three" name="group" type="radio">
    <input class="radio" id="radio-four" name="group" type="radio">

    @* The actual tabs *@
    <div class="tabs">
        <label class="tab" id="tab-one" for="radio-one">Account</label>
        <label class="tab" id="tab-two" for="radio-two">Coding Preferences</label>
        <label class="tab" id="tab-three" for="radio-three">Hobbies</label>
        <label class="tab" id="tab-four" for="radio-four">Random Question Generator</label>
    </div>

    @* The actual tabs' screens containing the forms and information *@
    <div class="profile-panels">
        <div class="panel" id="panel-one">
            <div id="basic-info-first-col">

                 @*Start of profile picture section*@
                <div id="profile-picture-wrapper">
                    @{
                        if (Model.ImageSrc == null)
                        {
                            <img id="profile-picture" src="~/assets/user.png" alt="blue and white graphical drawing of a person representing a user for when user has not uploaded a profile picture" />
                        }
                        else
                        {   
                            <img id="profile-picture" src="@Model.ImageSrc" alt="user's profile picture - content depends on what the user has uploaded"/>
                        }
                    }
                </div>
                  @*Profile picture upload form*@
                <div id="profile-picture-form-wrapper">
                    <form id="profile-picture-form" method="post"  enctype="multipart/form-data">
                        <label for="profile-picture-input">Update profile picture (only .png or .jpg files please):</label>
                        @* File should only be an image, so use 'accept' syntax here *@
                        <input id="profile-picture-input" name="profile-picture" accept="image/png, image/jpeg, image/jpg, image/x-png" type="file" size="1" />
                    </form>
                </div>
                @*End of profile picture section*@

                @*Career Phase and Experience Level Section*@
                @* Wrap each section in a flexbox form row to put 'change/edit' button INLINE next to the information section *@
                <div class="edit-profile-form-row" id="career-phase-wrapper">
                    @{
                        if (Model.CareerPhase.Name == "Starter")
                        {
                            <div>Career Starter</div>
                        }
                        else if (Model.CareerPhase.Name == "Changer")
                        {
                            <div>Career Changer</div>
                        }
                        else
                        {
                            <div>Career Developer</div>
                        }
                    }
                    <button class="edit-button" id="edit-career-button">Edit</button>
                </div>
                
                @*Career Phase Dropdown*@
                <div id="career-dropdown" class="hidden" style="display: none;">
                    <label id="career-error-label"></label>
                    @Html.DropDownListFor(model => model.SelectedCareerPhaseId, new
                    SelectList(Model.careerPhaseSelectList, "Value", "Text"),
                    "Select Career Phase", new { @class = "form-control", @id = "career-phases-dropdown"})
                    <div id="career-phase-buttons">
                        <button class="save-button" id="save-career-button">Save</button>
                        <button class="cancel-button" id="cancel-career-button">Cancel</button>
                    </div>
                </div>
                @*End of Career Phase Dropdown*@

                @*Experience Level*@
                <div class="edit-profile-form-row" id="experience-level-wrapper">
                    <div>
                        @Html.DisplayFor(model => model.ExperienceLevel!.Name)
                    </div>
                    <button class="edit-button" id="edit-experience-level">Edit</button>
                </div>
                @*Experience Level Dropdown*@
                <div id="experience-dropdown" class="hidden" style="display: none;">
                    <label id="experience-error-label"></label>
                    @Html.DropDownListFor(model => model.SelectedExperienceLevelId, new
                    SelectList(Model.experienceLevelSelectList, "Value", "Text"),
                    "Select Experience Level", new { @class = "form-control", @id = "experience-levels-dropdown"})
                    <div id="experience-level-buttons">
                        <button class="save-button" id="save-experience-button">Save</button>
                        <button class="cancel-button" id="cancel-experience-button">Cancel</button>
                    </div>
                </div>
                @*End of Experience Level Dropdown*@
                 @*End of Career Phase and Experience Level Section*@
            </div> 
            @*End of left column*@

            @* Second column on the right *@
            <div id="basic-info-second-col">

                @* Username and SlackId data + form *@
                <div class="edit-profile-form-row">

                    @* Edit Username Form *@
                    <form class="hidden" id="edit-username-form">
                        @* Hidden error message: display only if bad input *@
                        @* Label for username text input *@
                        <label id="username-input-label" for="edit-username-input">Change username:</label>
                        @* File should only be an image, so use 'accept' syntax here *@
                        <input id="edit-username-input" name="edit-username" type="text" placeholder="@Html.DisplayFor(model => model.UserName)" />
                        <button id="save-username-input-button" class="save-button" type="submit">Save</button>
                        <button id="cancel-update-username" class="cancel-button" type="submit">Cancel</button>
                    </form>
                    <h2 id="username-title"><b>@Html.DisplayFor(model => model.UserName)</b></h2>
                    <button class="edit-button" id="edit-username">Change</button>
                </div>
                 @* End of Edit Username Form *@

                 
                 @*Slack ID Section *@
                <div class="edit-profile-form-row">
                    <h5 id="slack-id-subtitle">
                        <b>SlackId:</b> @Html.DisplayFor(model => model.SlackId)
                    </h5>
                </div>
                 @*End of Slack ID Section *@

                @* Bio data + form section *@
                <div class="edit-profile-form-row">
                    <div id="bio-section">
                    @{
                        if (Model.Bio == null)
                        {
                            <button id="update-bio-button" class="add-button">Add Bio</button>
                        }
                        else
                            {
                                <h5 id="bio-title"><b>Bio:</b></h5>
                                <p id="bio">@Html.DisplayFor(model => model.Bio)</p>
                                <button id="update-bio-button" class="add-button">Edit Bio</button>
                        }
                    }
                    </div>
                        @*Bio form*@
                        <form class="hidden" id="edit-bio-form">
                            <div>
                                @* Hidden error message: display only if bad input *@
                                @* Label for username text input *@
                                <label id="bio-input-label" for="edit-bio-input"><b>Bio:</b></label>
                                <br />
                                @* File should only be an image, so use 'accept' syntax here *@
                                <textarea wrap="soft" rows="10" cols="40" id="edit-bio-input" name="edit-bio" type="text">
                                </textarea>
                                <br />
                            </div>
                        </form>
                        <br />
                        @*End of Bio form*@
                </div>
                @* Bio buttons (in a separate row: MUST go below the textarea form!)*@
                <div class="edit-profile-form-row">
                    <div class="hidden" id="bio-buttons">
                        <button class="save-button" id="save-bio-button">Save</button>
                        <button class="cancel-button" id="cancel-bio-button">Cancel</button>
                    </div>
                </div>
                @* End of Bio section*@

                @* Languages Spoken data and form *@
                @*Languages spoken data*@
                <div id="languages-wrapper" class="edit-profile-form-column">
                    <p class="interests-skills-subtitle" id="languages-spoken-subtitle">Languages Spoken:</p>
                    <ul class="preference-list">
                    @for (var i = 0; i < Model.LanguageNames!.Count(); i++)
                    {   
                        <li>
                            <div class="preference-container">
                                @Html.DisplayFor(model=>model.LanguageNames![i])
                            </div>
                        </li>
                    }
                    </ul>
                    <button class="edit-button" id="edit-languages-spoken">Edit</button>
                </div>
                 @*End of languages spoken data*@
                  @*Languages spoken form*@
                 <div class="form-group edit-profile-form-column hidden" id="language-selection-container">

                    <span class="flex-row"><label id="lang-label"><b>Reset languages:</b></label> 
                        <div id="lang-buttons">
                            <button class="save-button" id="save-lang-button">Save</button>
                            <button class="cancel-button" id="cancel-lang-button">Cancel</button>
                        </div>
                    </span>
                 

                     <div class="checkbox-container edit-profile-checkbox-container">
                        <ul class="checkbox-unordered-list">
                            @for (var i = 0; i < Model.NaturalLanguagesViewModelList!.Count(); i++)
                            {     
                                  // Create an ID property for each checkbox by concatenating a string with the index-number
                                  var checkboxId = "edit-lang-checkbox-" + (i + 1).ToString();
                                  <li>
                                       <input class="edit-lang-checkbox" type="checkbox" id=@checkboxId>
                                        @Html.Label(Model.NaturalLanguagesViewModelList![i].naturalLanguage!.Name,Model.NaturalLanguagesViewModelList![i].naturalLanguage!.Name,
                                        htmlAttributes: new { @for = checkboxId })
                                  </li>
                            }
                        </ul>
                    </div>    
                 </div>
                  @*End of languages spoken form*@

            </div>
            @* End of second col*@
            @* Beginning of the third col: reset users you've passed on and rejections, change password form*@
            <div id="basic-info-third-col">
                <div>
                    <button id="reset-rejections-button" class="add-button">Reset Passed Users/Rejections</button>
                    <label id="could-not-reset" class="hidden error-label" for="reset-rejections-button">Sorry! Database error - could not reset.</label>
                    <label id="could-reset" class="hidden" for="reset-rejections-button">Success! Reset the rejections.</label>
                </div>
                <br />
                @* CHANGE PASSWORD SECTION *@
                <div>
                    <button id="change-password-button" class="edit-button">Change Password</button>
                    @* Hidden form allowing user to verify current password; opens on  above button click*@
                    <div id="confirm-current-password-container" class="hidden">
                        @* Label: changes 'text' attribute if the password is incorrect *@
                        <label id="confirm-current-password-label" for="enter-current-password">Please enter your current password:</label>
                        <input id="confirm-current-password-input" type="password" />
                        <button id="submit-current-password" class="save-button">Submit</button><button id="cancel-submit-current-password" class="cancel-button">Cancel</button>
                    </div>
                    @* Hidden form enabling user to change to a new password: only opens when the old password has been confirmed *@
                    <div id="password-change-container" class="hidden">
                        @* Will store the old password because controller needs this to change password with Identity library *@
                        <input id="old-password" type="hidden"/>
                        <label id="label-reporting-the-state" class="input-confirmation-message">Old password has been confirmed!</label>
                        <label for="enter-new-password-input">Enter new password:</label>
                        <input id="enter-new-password-input" type="password" />
                        <label for="enter-new-password-confirm-input">Confirm new password:</label>
                        <input id="enter-new-password-confirm-input" type="password" />
                        <button id="submit-new-password" class="save-button">Save</button>
                        <button id="cancel-submit-new-password" class="cancel-button">Cancel</button>
                    </div>
                    @* Success message and Logout link that is hidden until user successfully updates a new password *@
                    <div id="password-change-success" class="hidden">
                        <label id="successfully-changed-password">Password changed successfully! Please click on the link below to log out and back in.</label>
                        <form method="post" asp-action="LogOut" asp-controller="Account"
                              asp-area="">
                            <input id="logout-after-password-change" type="submit" value="Log Out"/>
                        </form>
                    </div>
                </div>
                @* End of change password section *@
                <div>
                    <button id="delete-account" class="edit-button">Delete Account</button>
                     @* Hidden div showing warning asking if user really wants to continue: error avoidance Nielson principle!*@
                    <div id="delete-confirmation-container" class="hidden">
                        <label>Are you sure you want to continue? Your data will be lost.</label>
                        <button id="cancel-delete-button" class="save-button"> Don't delete! </button> <button id="confirm-delete-button" class="cancel-button">Delete</button>
                    </div>
                </div>
            </div>
            @* End of third column *@
        </div>
        @* End of first page/panel of the whole EditProfile View*@

        @* Start of second panel*@
        <div class="panel" id="panel-two">
            <div id="panel-two-col">
                
                <div class="panel-title">Coding Preferences</div>
                    
                 @* Programming Languages *@
                <div id="programming-languages-wrapper" class="edit-profile-form-column">

                    @* Programming Languages Data*@
                    <div id="programming-languages-data">
                        <p class="interests-skills-subtitle" id="languages-spoken-subtitle">Favourite Programming Languages:</p>
                        <ul class="preference-list">
                        @for (var i = 0; i < Model.ProgrammingLanguageNames!.Count(); i++)
                        {   
                            <li>
                                <div class="preference-container">
                                    @Html.DisplayFor(model=>model.ProgrammingLanguageNames![i])
                                </div>
                            </li>
                        }
                        </ul>
                        <div>
                            <button class="edit-button" id="edit-programming-languages">Edit</button>
                        </div> 
                    </div>


                    @*Form to change programming languages*@
                     <div class="form-group edit-profile-form-column hidden" id="programming-language-selection-container">

                        <span class="flex-row"><label class="options-label" id="programming-lang-label"><b>Change programming languages:</b></label> 
                            <div id="programming-lang-buttons">
                                <button class="save-button" id="save-programming-lang-button">Save</button>
                                <button class="cancel-button" id="cancel-programming-lang-button">Cancel</button>
                            </div>
                        </span>
                 
                         <div class="checkbox-container edit-profile-checkbox-container">
                            <ul class="checkbox-unordered-list">
                                @for (var i = 0; i < Model.ProgrammingLanguagesViewModelList!.Count(); i++)
                                {     
                                      // Create an ID property for each checkbox by concatenating a string with the index-number
                                      var checkboxId = "edit-programming-lang-checkbox-" + (i + 1).ToString();
                                      <li>
                                           <input class="edit-programming-lang-checkbox" type="checkbox" id=@checkboxId>
                                            @Html.Label(Model.ProgrammingLanguagesViewModelList![i].programmingLanguage!.Name,Model.ProgrammingLanguagesViewModelList![i].programmingLanguage!.Name,
                                            htmlAttributes: new { @for = checkboxId })
                                      </li>
                                }
                            </ul>
                        </div>   
                    </div>
                 @*End of form to change programming languages*@
                </div>
                 @*End of form to change programming languages section*@


                @* CS Interests *@
                <div id="interests-wrapper" class="edit-profile-form-column">
                    @* CS Interests User Data *@
                    <div id="cs-interests-data">
                        <p class="interests-skills-subtitle" id="languages-spoken-subtitle">Computer Science Interests:</p>
                        <ul class="preference-list">
                        @for (var i = 0; i < Model.CSInterestNames!.Count(); i++)
                        {   
                            <li>
                                <div class="preference-container">
                                    @Html.DisplayFor(model=>model.CSInterestNames![i])
                                </div>
                            </li>
                        }
                        </ul>
                        <button class="edit-button" id="edit-cs-interests">Edit</button>
                    </div>


                    @*Form to change CS interests*@
                     <div class="form-group edit-profile-form-column hidden" id="cs-interest-selection-container">

                        <span class="flex-row"><label  class="options-label"  id="cs-interest-label"><b>Change Computer Science interests:</b></label> 
                            <div id="cs-interest-buttons">
                                <button class="save-button" id="save-cs-interest-button">Save</button>
                                <button class="cancel-button" id="cancel-cs-interest-button">Cancel</button>
                            </div>
                        </span>
                 
                         <div class="checkbox-container edit-profile-checkbox-container">
                            <ul class="checkbox-unordered-list">
                                @for (var i = 0; i < Model.CSInterestsViewModelList!.Count(); i++)
                                {     
                                      // Create an ID property for each checkbox by concatenating a string with the index-number
                                      var checkboxId = "edit-cs-interest-checkbox-" + (i + 1).ToString();
                                      <li>
                                           <input class="edit-cs-interest-checkbox" type="checkbox" id=@checkboxId>
                                            @Html.Label(Model.CSInterestsViewModelList![i].CSInterest!.Name,Model.CSInterestsViewModelList![i].CSInterest!.Name,
                                            htmlAttributes: new { @for = checkboxId })
                                      </li>
                                }
                            </ul>
                        </div>   
                    
                 </div>
                  @*End of Form to change CS interests*@
                </div>
                @*End of CS Interest Section*@
            </div>
        </div>
        @* End of second panel *@
        @* Start of third panel *@
        <div class="panel" id="panel-three">
            @* Third panel's main column *@
             <div id="panel-three-col">
                @* Hobbies Section *@
                <div class="panel-title">Hobbies</div>
                @* Hobbies Section Main COntainer*@
                <div id="hobbies-wrapper" class="edit-profile-form-column">

                    @* Hobbies Data*@
                    <div id="hobbies-data">
                        <p class="interests-skills-subtitle" id="languages-spoken-subtitle">Hobbies and Interests:</p>
                        <ul class="preference-list">
                        @for (var i = 0; i < Model.HobbyNames!.Count(); i++)
                        {   
                            <li>
                                <div class="preference-container">
                                    @Html.DisplayFor(model=>model.HobbyNames![i])
                                </div>
                            </li>
                        }
                        </ul>
                        <div>
                            <button class="edit-button" id="edit-hobbies">Edit</button>
                        </div> 
                    </div>


                    @*Form to change programming languages*@
                     <div class="form-group edit-profile-form-column hidden" id="hobbies-selection-container">

                        <span class="flex-row"><label  class="options-label"  id="hobby-label"><b>Change hobbies:</b></label> 
                            <div id="hobby-buttons">
                                <button class="save-button" id="save-hobby-button">Save</button>
                                <button class="cancel-button" id="cancel-hobby-button">Cancel</button>
                            </div>
                        </span>
                 
                         <div class="checkbox-container edit-profile-checkbox-container">
                            <ul class="checkbox-unordered-list">
                                @for (var i = 0; i < Model.HobbiesViewModelList!.Count(); i++)
                                {     
                                      // Create an ID property for each checkbox by concatenating a string with the index-number
                                      var checkboxId = "edit-hobby-checkbox-" + (i + 1).ToString();
                                      <li>
                                           <input class="edit-hobby-checkbox" type="checkbox" id=@checkboxId>
                                            @Html.Label(Model.HobbiesViewModelList![i].Hobby!.Name,Model.HobbiesViewModelList![i].Hobby!.Name,
                                            htmlAttributes: new { @for = checkboxId })
                                      </li>
                                }
                            </ul>
                        </div>   
                    </div>
                 @*End of form to change hobbies*@
                </div>
                 @*End of hobbies section*@
            </div>
        </div>
        @* End of third panel *@
        @* Start of fourth panel *@
        <div class="panel" id="panel-four">
             @* Fourth panel's main column *@
             <div id="panel-four-col">
                <div class="panel-title">Random "About You" Questions</div>
                 @* Random Question Generator*@
                <div id="random-question-wrapper" class="edit-profile-form-column">
                    <div id="questions-data"  class="edit-profile-form-column">
                        <ul id="questions-list">
                        @for (var i = 0; i < Model.QuestionAnswerBlocks!.Count(); i++)
                        {    
                            var hiddenInputId = "hidden-" + i;
                            var buttonId = "delete-button-" + i;
                            var editButtonId = "edit-button-" + i;
                            var saveButtonId = "save-button-" + i;
                            var editInputId = "edit-input-" + i;
                            var editInputIdWrapper = "edit-input-wrapper-" + i;
                            <li class="question-answer-block">
                                @Html.HiddenFor(m => m.QuestionAnswerBlocks![i].QuestionAnswerBlockId, htmlAttributes: new { @id = hiddenInputId})
                                <div><b>@Html.DisplayFor(model => model.QuestionAnswerBlocks[i].QuestionString)</b></div>
                                <br>
                                <div>@Html.DisplayFor(model => model.QuestionAnswerBlocks[i].AnswerString)</div>
                                <div id=@editInputIdWrapper class="hidden"><input class="edit-answer-input" type="text" id=@editInputId><button class="save-answer-button" id=@saveButtonId>Save</button></div>
                                <br>
                                <div><button class="delete-button" id=@buttonId>Delete</button><button class="edit-answer-button" id=@editButtonId>Edit</button></div>
                            </li>
                            <br/>
                            <br/>
                        }
                        </ul>
                    </div>
                    <div class="edit-profile-form-row"><label><b>Click on the button to answer questions 
                        about yourself, to increase your chances of getting a match with a similar buddy.</b></label></div>
                     <div>
                         @* Click this button to get a random question *@
                         <button class="random-button" id="random-question-generator">Generate Random Question</button>
                     </div>
                     @* Put the question to-be-answered here *@
                     <div class="edit-profile-form-center-row">
                         <div><p id="random-question" class="question"></p></div>
                         <br/>
                          <label id="error-label-for-answer"></label>
                          @* Hidden input field for the answer - appears when question is generated *@
                         <div id="answer-inputs" class="answer-input-fields edit-profile-form-center-row hidden">
                             @* QuestionId goes in the hidder field*@
                             <input id="hidden-input" type="hidden" value="x">
                             @* User's answer goes here *@
                             <div class="flex-row">
                                 <label id="answer-label" for="answer-input">Answer:</label>
                                 <input id="answer-input" type="text">
                             <div/>
                             <div>
                                 <button class="save-button" id="save-answer-button">Save</button>
                             </div>
                         </div>
                    </div>

                 </div>
                  @* End of Random Question Generator*@
            </div>
        </div>
    </div>
     @* End  of fourth panel *@
</div>