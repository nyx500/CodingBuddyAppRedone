@*Attribution for code: https://bbbootstrap.com/snippets/multi-step-form-wizard-30467045*@

@model RegisterViewModel

@{
ViewBag.Title = "Register (multistep form)";
}
@{
var errors = Context.Session.GetObject<CreateUserErrors>("InputErrors");
    }


    <!-- MultiStep Form -->
    <div class="registration-container justify-content-left p-0">
        <div class="wizard-page w-100 m-0 container-fluid p-0 align-self:center">
        @*Attribution for complex Bootstrap responsive wizard form structure: https://bbbootstrap.com/snippets/multi-step-form-wizard-30467045 /*@
        @*Attribution for how to move a Bootstrap element further down the page: https://stackoverflow.com/questions/31574775/move-a-bootstrap-input-element-further-down-the-page*@
        <div class="row justify-content-left align-items-center mx-0 px-0 py-0 h-100">
            <div class="col w-100 text-center col-11 col-sm-9 col-md-7 col-lg-6 mt-3 mb-2 px-0 mx-0">
                <div class="card form-card">
                    <h2><strong>Sign Up</strong></h2>
                    <p>Fill in all the form fields to go to the next step...</p>
                    <div class="row">
                        <div class="col mx-0">
                            <form id="registration-form" method="post" asp-action="RegisterInSteps">
                                <!-- progressbar -->
                                <ul id="progressbar">
                                    @*SlackId, Username, Passwords*@
                                    <li class="active fa" id="account"><strong>Account</strong></li>
                                    @*Career phase, Experience, Gender, Languages spoken*@
                                    <li class="fa" id="personal"><strong>About Me</strong></li>
                                    @*Computer Science interests and Hobbies*@
                                    <li class="fa" id="interests"><strong>Interests</strong></li>
                                    <li class="fa" id="confirm"><strong>Finish</strong></li>
                                </ul>
                                <!-- fieldsets -->
                                <fieldset>
                                    <div class="form-card">
                                        <h3 class="fs-title">Account Information</h3>
                                        <br />
                                        <br />

                                        @{

                                        if (errors != null && (errors.No_Slack_Id || errors.Invalid_Slack_Id ||
                                        errors.Bad_Slack_Id_Length))
                                        {
                                                                                                                        <label style="color: red;" class="registration-error-message">
                                                                                                                            Please enter a SlackID (only
                                                                                                                                alphanumeric chars allowed, must include at least 1 number!)</label>

                                            //    <input id="slackId" style="color: red;" asp-for="SlackId" class="form-control"
                                            //type="text" name="slackIdInput" placeholder="SlackId" />

                                                                                                                        @Html.EditorFor(model => model.SlackId, new { htmlAttributes = new { Style = "color: red;", @class = "form-control",
                                            id = "slackId", placeholder="Slack ID"} })
                                                                                                                        @Html.ValidationMessageFor(model => model.SlackId, "", new { @class = "text-danger" })
                                        }
                                        else
                                        {   
                                            //Hidden label for client-side validation script: 
                                            // only appears if bad input detected in site.js file
                                                                                                                        <label id="client-side-error-slack-id" style="display: none; text-align: left; color: red;">
                                                                                                                            Invalid SlackID error: Must be between 5 and 50 chars, alphanumeric, and include
                                                                                                                            at least one digit!
                                                                                                                        </label>
                                                                                                                         <label id="client-side-error-slack_id-taken" style="display: none; color: red;">
                                                                                                                            SlackID is already taken!
                                                                                                                        </label>
                                            //    <input id="slackId" asp-for="SlackId" class="form-control" type="text"
                                            //name="slackIdInput" placeholder="SlackId" />
                                            <label id="slack-id-label">Please enter a Slack ID (alphanumeric chars only, at least 5 chars):</label>
                                                            @Html.EditorFor(model => model.SlackId, new { htmlAttributes = new {Style = "color: black;", @class = "form-control",
                                            id = "slackId", placeholder="Slack ID"} })
                                                                                                                        @Html.ValidationMessageFor(model => model.SlackId, "", new { @class = "text-danger" })

                                        }
                                        }
                                        <span style="font-weight: 800!important; color:red; background-color: black;"
                                            asp-validation-for="SlackId" class="text-danger"></span>




                                        @{
                                        if (errors != null && (errors.No_Username || errors.Invalid_Username ||
                                        errors.Bad_Username_Length))
                                        {
                                                                                                                        <label style="color: red;" class="registration-error-message">Please enter a username containing
                                                                                                                            only alphanumeric characters and '_' (max. length = 70 chars)</label>

                                                                                                                        @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { placeholder="Username", Style = "color: red;", @class = "form-control", id="username-input" } })
                                                                                                                        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                        }
                                        else
                                        {
                                            //Hidden label for client-side validation script:
                                            // only appears if bad input detected in site.js file
                                                                                                                        <label id="client-side-error-username" style="display: none; color: red;">
                                                                                                                            Invalid username error: Must be between 6 and 70 chars, and only include
                                                                                                                            alphanumeric characters and '_'.
                                                                                                                        </label>
                                                                                                                        <label id="client-side-error-username-taken" style="display: none; color: red;">
                                                                                                                            Username is already taken - please choose a different one!
                                                                                                                        </label>
                                                                                                                          <label id="username-label">Please enter a username (alphanumeric and _ only, at least 6 characters):</label>
                            
                                                                                                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { placeholder="Username", Style = "color: black;", @class = "form-control", id="username-input" } })
                                                                                                                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                        }

                                        }
                                        <span style="font-weight: 800!important; background-color: black;"
                                            asp-validation-for="UserName" class="text-danger"></span>






                                        @{
                                        if (errors != null &&
                                        (errors.No_Password || errors.Bad_Password_Length))
                                        {
                                                                                                                            <label class="registration-error-message">Please enter a password of at least 8
                                                                                                                                characters!</label>

                                                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { placeholder="Password", Style = "color: red;", id="password-input", @class = "form-control", type="password" } })
                                                                                                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                                                                                                            <span style="font-weight: 800!important; background-color: black;"
                                            asp-validation-for="Password" class="text-danger"></span>


                                                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { placeholder="Confirm password", Style = "color: black;", id="confirm-password-input", @class = "form-control", type="password" } })
                                                                                                                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                                                                                                            <span style="font-weight: 800!important; background-color: black;"
                                            asp-validation-for="ConfirmPassword" class="text-danger"></span>
                                        }
                                        if (errors != null && errors!.Passwords_Do_Not_Match)
                                        {
                                                                                                                            <label class="registration-error-message">Passwords do not match!</label>
                                                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { placeholder="Password", Style = "color: red;", id="password-input", @class = "form-control", type="password" } })
                                                                                                                             @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                                                                                                            <span style="font-weight: 800!important; background-color: black;"
                                            asp-validation-for="Password" class="text-danger"></span>
                                                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { placeholder="Confirm password", Style = "color: red;", id="confirm-password-input", @class = "form-control", type="password" } })
                                                                                                                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                                                                                                            <span style="font-weight: 800!important; background-color: black;"
                                            asp-validation-for="ConfirmPassword" class="text-danger"></span>
                                        }
                                        else
                                        {       

                                             // Hidden label for client-side validation script:
                                            // only appears if bad input detected in site.js file
                                                                                                                        <label id="client-side-error-password" style="display: none; color: red;">
                                                                                                                            Please enter a password of length at least 10 characters!
                                                                                                                        </label>
                                                                                                                        <label id="password-label">Please enter a password (at least 10 chars!):</label>
                                                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { placeholder="Password", Style = "color: black;", id="password-input", @class = "form-control", type="password" } })
                                                                                                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                                                                                                            <span style="font-weight: 800!important; background-color: black;"
                                            asp-validation-for="Password" class="text-danger"></span>

                                            // Hidden label for client-side validation script:
                                            // only appears if bad input detected in site.js file
                                                                                                                        <label id="client-side-error-confirm-password" style="display: none; color: red;">
                                                                                                                            Passwords do not match.
                                                                                                                                                                                                </label>
                                                                                                                        <label id="confirm-password-label">
                                                                                                                            Please type in your password again here to confirm:
                                                                                                                        </label>
                                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { placeholder="Confirm password", Style = "color: black;", id="confirm-password-input", @class = "form-control", type="password" } })
                                                                                                                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                                                                                                            <span style="font-weight: 800!important; background-color: black;"
                                            asp-validation-for="ConfirmPassword" class="text-danger"></span>
                                        }
                                        }
                                    </div>
                                    <input type="button" name="next" class="next action-button" id="first"
                                        value="Next Step" />
                                </fieldset>
                                <fieldset>
                                    <div class="form-card">
                                        <h3 class="fs-title">Personal Information</h3>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SelectedCareerPhaseId, htmlAttributes: new {
                                            Style = "color: black;", @class = "control-label col-md-6", id="career-phase-label" })
                                            <div class="col-md-10">
                                                @Html.DropDownListFor(model => model.SelectedCareerPhaseId, new
                                                SelectList(Model.careerPhaseSelectList, "Value", "Text"),
                                                "Select Career Phase", new { @class = "form-control", @id = "career-phases-dropdown"})
                                                @Html.ValidationMessageFor(model => model.SelectedCareerPhaseId, "", new
                                                { @class = "text-danger" })
                                            </div>
                                            <br />
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SelectedExperienceLevelId, htmlAttributes: new
                                        { Style = "color: black;", @class = "control-label col-md-6", id="experience-level-label" })
                                            <div class="col-md-10">
                                                @Html.DropDownListFor(model => model.SelectedExperienceLevelId, new
                                                SelectList(Model.experienceLevelSelectList, "Value", "Text"),
                                                "Select Your Experience Level", new { @class = "form-control", @id = "experience-levels-dropdown"})
                                                @Html.ValidationMessageFor(model => model.SelectedExperienceLevelId, "",
                                                new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <br />
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SelectedGenderId, htmlAttributes: new { Style
                                            = "color: black;", @class = "control-label col-md-6" })
                                            <div class="col-md-10">
                                                @Html.DropDownListFor(model => model.SelectedGenderId, new
                                                SelectList(Model.genderSelectList, "Value", "Text"),
                                                "Select Your Gender (optional)", new { @class = "form-control", @id = "gender-dropdown"})
                                                @Html.ValidationMessageFor(model => model.SelectedGenderId, "", new {
                                                @class = "text-danger" })
                                            </div>
                                        </div>

                                        <br />
                                        <br />
                                        <div class="form-group" style="padding: 10px;">
                                            <b>@Html.LabelFor(model => model.NaturalLanguagesViewModelList,
                                                htmlAttributes: new {Style = "color: white; ", @class = "control-label" }) </b>
                                            <br />
                                            <div class="checkbox-container">
                                                <ul class="checkbox-unordered-list">
                                                    @for (var i = 0; i < Model.NaturalLanguagesViewModelList!.Count(); i++)
                                                    {   
                                                            // Create an ID property for each checkbox by concatenating a string with the index-number
                                                            var checkboxId = "lang-checkbox-" + (i + 1).ToString();
                                                            <li>
                                                                @Html.HiddenFor(model => model.NaturalLanguagesViewModelList![i])
                                                                @Html.CheckBoxFor(model =>
                                                                model.NaturalLanguagesViewModelList![i].isSelected, new {
                                                                @class="lang-checkbox", @id = checkboxId, @type="checkbox" })
                                                                @Html.Label(Model.NaturalLanguagesViewModelList![i].naturalLanguage!.Name,Model.NaturalLanguagesViewModelList![i].naturalLanguage!.Name,
                                                                htmlAttributes: new { @for = checkboxId })
                                                            </li>   
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <input type="button" name="previous" class="previous action-button-previous"
                                        value="Previous" />
                                    <input type="button" name="next" class="next action-button" id="second"
                                        value="Next Step" />
                                </fieldset>
                                <fieldset>
                                    <div class="form-card">
                                        <h3 class="fs-title">Skills and Interests</h3>




                                        <br />
                                        <br />
                                        <div class="form-group" style="padding: 10px;">
                                            <b>
                                                @Html.LabelFor(model => model.ProgrammingLanguagesViewModelList,
                                                htmlAttributes: new {Style = "color: white; ", @class = "control-label",id="progLangsLabel" })
                                            </b>
                                            <br />
                                            <div class="checkbox-container">
                                                <ul class="checkbox-unordered-list">
                                                    @for (var i = 0; i < Model.ProgrammingLanguagesViewModelList!.Count(); i++)
                                                    {
                                                        // Create an ID property for each checkbox by concatenating a string with the index-number
                                                        var checkboxId = "prog-lang-checkbox-" + (i + 1).ToString();
                                                        <li>
                                                            @Html.HiddenFor(model => model.ProgrammingLanguagesViewModelList![i])
                                                            @Html.CheckBoxFor(model =>
                                                        model.ProgrammingLanguagesViewModelList![i].isSelected, new {
                                                        @class="prog-lang-checkbox", @id = checkboxId, @type="checkbox" })
                                                            @Html.Label(Model.ProgrammingLanguagesViewModelList![i].programmingLanguage!.Name, Model.ProgrammingLanguagesViewModelList![i].programmingLanguage!.Name,
                                                        htmlAttributes: new { @for = checkboxId })
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>

                                        <br />
                                        <br />
                                        <div class="form-group" style="padding: 10px;">
                                            <b>
                                                @Html.LabelFor(model => model.CSInterestsViewModelList,
                                                htmlAttributes: new {Style = "color: white; ", @class = "control-label",id="csInterestsLabel" })
                                            </b>
                                            <br />
                                            <div class="checkbox-container">
                                                <ul class="checkbox-unordered-list">
                                                    @for (var i = 0; i < Model.CSInterestsViewModelList!.Count(); i++)
                                                    {
                                                        // Create an ID property for each checkbox by concatenating a string with the index-number
                                                        var checkboxId = "cs-interest-checkbox-" + (i + 1).ToString();
                                                        <li>
                                                            @Html.HiddenFor(model => model.CSInterestsViewModelList![i])
                                                            @Html.CheckBoxFor(model =>
                                                        model.CSInterestsViewModelList![i].isSelected, new {
                                                        @class="cs-interest-checkbox", @id = checkboxId, @type="checkbox" })
                                                            @Html.Label(Model.CSInterestsViewModelList![i].CSInterest!.Name, Model.CSInterestsViewModelList![i].CSInterest!.Name,
                                                        htmlAttributes: new { @for = checkboxId })
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>

                                        <br />
                                        <br />
                                        <div class="form-group" style="padding: 10px;">
                                            <b>
                                                <label class="control-label" id="hobbiesLabel">
                                                    Please select 3-10 hobbies!
                                                </label>
                                            </b>
                                            <br />
                                            <div class="checkbox-container">
                                                <ul class="checkbox-unordered-list">
                                                    @for (var i = 0; i < Model.HobbiesViewModelList!.Count(); i++)
                                                    {
                                                        // Create an ID property for each checkbox by concatenating a string with the index-number
                                                        var checkboxId = "hobby-checkbox-" + (i + 1).ToString();
                                                        <li>
                                                            @Html.HiddenFor(model => model.HobbiesViewModelList![i])
                                                            @Html.CheckBoxFor(model =>
                                                        model.HobbiesViewModelList![i].isSelected, new {
                                                        @class="hobby-checkbox", @id = checkboxId, @type="checkbox" })
                                                            @Html.Label(Model.HobbiesViewModelList![i].Hobby!.Name, Model.HobbiesViewModelList![i].Hobby!.Name,
                                                        htmlAttributes: new { @for = checkboxId })
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>

                                    </div>
                                    <input type="button" name="previous" class="previous action-button-previous"
                                        value="Previous" />
                                    <input type="button" name="make_payment" class="next action-button" id="confirmation"
                                        value="Confirm" />
                                </fieldset>
                                <fieldset>
                                    <div class="form-card">
                                        <h2 class="fs-title text-center">Success !</h2>
                                        <br><br>
                                        <div class="row justify-content-center">
                                            <div class="col-3">
                                                <img src="https://img.icons8.com/color/96/000000/ok--v2.png"
                                                    class="fit-image">
                                            </div>
                                        </div>
                                        <br><br>
                                        <div class="row justify-content-center">
                                            <div class="col-7 text-center">
                                                <h5>You Have Successfully Signed Up</h5>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*Code-Connect-Create Graphics/Logo on right-hand-side of the screen*@
<div class="splitscreen right">
    <div class="slogan-container">
        <img id="slogan-graphics" src="~/assets/codeConnectCreate.svg" alt="White text in black bubble background saying Code, Connect Create." />
    </div>
</div>