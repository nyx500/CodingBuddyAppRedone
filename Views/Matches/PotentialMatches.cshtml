@model PotentialMatchesViewModel

<div class="matches-wrapper">

    @if (Model.matches.Count == 0)
    {   
        <div class="no-matches-error-message">
            <h1>Unfortunately, we do not have any matches for the options you have selected!</h1>
            <br>
            <h2>Try some other options or maybe try again later!</h2>
            @Html.ActionLink("Start Again", "FindABuddy", "Matches", null, new { @class = "return-to-page-link"})
        </div>
    }

    @* Error section if user runs out of matches *@
    <div id="no-matches-left" class="no-matches-error-message hidden">
        <h1>Unfortunately, we do not have any matches left!</h1>
        <br>
        <h2>Try some other options or maybe try again later!</h2>
        @Html.ActionLink("Start Again", "FindABuddy", "Matches", null, new { @class = "return-to-page-link"})
    </div>

    @for (var i = 0; i < Model.matches.Count(); i++)
    {
        string DivId = "container-" + i;
        string UserId = Model.matches[i].Id;
        string LikeButtonId = "like-" + UserId;
        string PassButtonId = "pass-" + UserId;

        // Only show the first user when page is loaded
        string className = "potential-match-container";

        if (i != 0)
        {
            className = "hidden potential-match-container";
        }

        <div id=@DivId class=@className>
            @* Three sections: username header, profile picture, body with details about the user *@
            <div class="match-header-row">
                <h1>

                    @Html.ActionLink(@Model.matches[i].Username, "ViewProfile", "Matches", 
                    new { id = @Model.matches[i].Id}, 
                    null
                   )
                </h1>
            </div>
            @* Body of the container under the username *@
            <div class="match-body-row">

                @* Left column displaying profile picture *@

                <div class="match-image-column">
                @{
                    if (Model.matches[i].PictureStringForHtml == null)
                    {
                        <img class="match-profile-picture" src="~/assets/user.png" alt="blue and white graphical drawing of a person representing a user for when user has not uploaded a profile picture" />
                    }
                    else
                    {
                        <img class="match-profile-picture" src="@Model.matches[i].PictureStringForHtml" alt="user's profile picture - content depends on what the user has uploaded" />
                    }
                }
                </div>


                @* Display user preferences *@
                <div class="match-body-content-row">

                    @* Display Career Phase and Experience Level *@
                    <div class="match-body-coding-skills-column">


                        @* Like/Pass Form *@
                        <div class="match-likes-div">
                            <div class="like-div">
                                <input type="hidden" value=@UserId>
                                <button id=@LikeButtonId class="like-button"><i class="fas fa-heart fa-3x"></i> Like</button>
                                <input type="hidden" value=@DivId>
                            </div>
                            <div class="pass-div">
                                <input type="hidden" value=@UserId>
                                <button id=@PassButtonId class="pass-button"><i class="fas fa-circle-xmark fa-3x"></i></button>
                                <input type="hidden" value=@DivId>
                            </div>
                        </div>

                        <div id="match-career-phase" class="data-item">
                            Career @Html.DisplayFor(model=>model.matches[i].CareerPhaseName)
                        </div>
                        <div id="match-experience-level" class="data-item">
                            @Html.DisplayFor(model=>model.matches[i].ExperienceLevelName)
                        </div>
                    </div>

                    @* Display CS Interests *@
                    <div class="match-body-cs-interests-column">
                        <p>Interests:</p>
                        @for (var j = 0; j < Model.matches[i].Interests.Count; j++)
                        {
                            <div>
                                @Html.DisplayFor(model => model.matches[i].Interests[j].Name)
                            </div>
                        }
                    </div>

                </div>

            </div>
            <div class="match-body">
            </div>
        </div>

    }   

</div>